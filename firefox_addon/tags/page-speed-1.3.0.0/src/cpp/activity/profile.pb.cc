// Generated by the protocol buffer compiler.  DO NOT EDIT!

#include "profile.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format_inl.h>

namespace activity {

namespace {

const ::google::protobuf::Descriptor* FunctionMetadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FunctionMetadata_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* Profile_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Profile_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_profile_2eproto() {
  protobuf_AddDesc_profile_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "profile.proto");
  GOOGLE_CHECK(file != NULL);
  FunctionMetadata_descriptor_ = file->message_type(0);
  static const int FunctionMetadata_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, function_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, file_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, function_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, function_source_utf8_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, function_instantiation_time_usec_),
  };
  FunctionMetadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FunctionMetadata_descriptor_,
      FunctionMetadata::default_instance_,
      FunctionMetadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FunctionMetadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FunctionMetadata));
  CallTree_descriptor_ = file->message_type(1);
  static const int CallTree_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, function_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, entry_time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, exit_time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, children_),
  };
  CallTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallTree_descriptor_,
      CallTree::default_instance_,
      CallTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallTree));
  Profile_descriptor_ = file->message_type(2);
  static const int Profile_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, start_time_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, duration_usec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, function_metadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, call_tree_),
  };
  Profile_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Profile_descriptor_,
      Profile::default_instance_,
      Profile_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Profile, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Profile));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_profile_2eproto);
}

void protobuf_RegisterTypes() {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FunctionMetadata_descriptor_, &FunctionMetadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallTree_descriptor_, &CallTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Profile_descriptor_, &Profile::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_profile_2eproto() {
  delete FunctionMetadata::default_instance_;
  delete FunctionMetadata_reflection_;
  delete CallTree::default_instance_;
  delete CallTree_reflection_;
  delete Profile::default_instance_;
  delete Profile_reflection_;
}

void protobuf_AddDesc_profile_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rprofile.proto\022\010activity\"\236\001\n\020FunctionMe"
    "tadata\022\030\n\014function_tag\030\001 \002(\005:\002-1\022\021\n\tfile"
    "_name\030\002 \002(\t\022\025\n\rfunction_name\030\003 \002(\t\022\034\n\024fu"
    "nction_source_utf8\030\004 \002(\t\022(\n function_ins"
    "tantiation_time_usec\030\005 \001(\003\"\203\001\n\010CallTree\022"
    "\030\n\014function_tag\030\001 \002(\005:\002-1\022\033\n\017entry_time_"
    "usec\030\002 \002(\003:\002-1\022\032\n\016exit_time_usec\030\003 \002(\003:\002"
    "-1\022$\n\010children\030\004 \003(\0132\022.activity.CallTree"
    "\"\237\001\n\007Profile\022\033\n\017start_time_usec\030\001 \002(\003:\002-"
    "1\022\031\n\rduration_usec\030\002 \002(\003:\002-1\0225\n\021function"
    "_metadata\030\003 \003(\0132\032.activity.FunctionMetad"
    "ata\022%\n\tcall_tree\030\004 \003(\0132\022.activity.CallTr"
    "ee", 482);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "profile.proto", &protobuf_RegisterTypes);
  FunctionMetadata::default_instance_ = new FunctionMetadata();
  CallTree::default_instance_ = new CallTree();
  Profile::default_instance_ = new Profile();
  FunctionMetadata::default_instance_->InitAsDefaultInstance();
  CallTree::default_instance_->InitAsDefaultInstance();
  Profile::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_profile_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_profile_2eproto {
  StaticDescriptorInitializer_profile_2eproto() {
    protobuf_AddDesc_profile_2eproto();
  }
} static_descriptor_initializer_profile_2eproto_;


// ===================================================================

const ::std::string FunctionMetadata::_default_file_name_;
const ::std::string FunctionMetadata::_default_function_name_;
const ::std::string FunctionMetadata::_default_function_source_utf8_;
#ifndef _MSC_VER
const int FunctionMetadata::kFunctionTagFieldNumber;
const int FunctionMetadata::kFileNameFieldNumber;
const int FunctionMetadata::kFunctionNameFieldNumber;
const int FunctionMetadata::kFunctionSourceUtf8FieldNumber;
const int FunctionMetadata::kFunctionInstantiationTimeUsecFieldNumber;
#endif  // !_MSC_VER

FunctionMetadata::FunctionMetadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FunctionMetadata::InitAsDefaultInstance() {}

FunctionMetadata::FunctionMetadata(const FunctionMetadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FunctionMetadata::SharedCtor() {
  _cached_size_ = 0;
  function_tag_ = -1;
  file_name_ = const_cast< ::std::string*>(&_default_file_name_);
  function_name_ = const_cast< ::std::string*>(&_default_function_name_);
  function_source_utf8_ = const_cast< ::std::string*>(&_default_function_source_utf8_);
  function_instantiation_time_usec_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FunctionMetadata::~FunctionMetadata() {
  SharedDtor();
}

void FunctionMetadata::SharedDtor() {
  if (file_name_ != &_default_file_name_) {
    delete file_name_;
  }
  if (function_name_ != &_default_function_name_) {
    delete function_name_;
  }
  if (function_source_utf8_ != &_default_function_source_utf8_) {
    delete function_source_utf8_;
  }
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* FunctionMetadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FunctionMetadata_descriptor_;
}

const FunctionMetadata& FunctionMetadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_profile_2eproto();  return *default_instance_;
}

FunctionMetadata* FunctionMetadata::default_instance_ = NULL;

FunctionMetadata* FunctionMetadata::New() const {
  return new FunctionMetadata;
}

void FunctionMetadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    function_tag_ = -1;
    if (_has_bit(1)) {
      if (file_name_ != &_default_file_name_) {
        file_name_->clear();
      }
    }
    if (_has_bit(2)) {
      if (function_name_ != &_default_function_name_) {
        function_name_->clear();
      }
    }
    if (_has_bit(3)) {
      if (function_source_utf8_ != &_default_function_source_utf8_) {
        function_source_utf8_->clear();
      }
    }
    function_instantiation_time_usec_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FunctionMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 function_tag = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &function_tag_));
        _set_bit(0);
        if (input->ExpectTag(18)) goto parse_file_name;
        break;
      }
      
      // required string file_name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_file_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_file_name()));
        if (input->ExpectTag(26)) goto parse_function_name;
        break;
      }
      
      // required string function_name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_function_name:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_function_name()));
        if (input->ExpectTag(34)) goto parse_function_source_utf8;
        break;
      }
      
      // required string function_source_utf8 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_function_source_utf8:
        DO_(::google::protobuf::internal::WireFormat::ReadString(input, mutable_function_source_utf8()));
        if (input->ExpectTag(40)) goto parse_function_instantiation_time_usec;
        break;
      }
      
      // optional int64 function_instantiation_time_usec = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_function_instantiation_time_usec:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &function_instantiation_time_usec_));
        _set_bit(4);
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FunctionMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    FunctionMetadata::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 function_tag = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->function_tag(), output);
  }
  
  // required string file_name = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteString(2, this->file_name(), output);
  }
  
  // required string function_name = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteString(3, this->function_name(), output);
  }
  
  // required string function_source_utf8 = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormat::WriteString(4, this->function_source_utf8(), output);
  }
  
  // optional int64 function_instantiation_time_usec = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(5, this->function_instantiation_time_usec(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FunctionMetadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 function_tag = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->function_tag(), target);
  }
  
  // required string file_name = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(2, this->file_name(), target);
  }
  
  // required string function_name = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(3, this->function_name(), target);
  }
  
  // required string function_source_utf8 = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormat::WriteStringToArray(4, this->function_source_utf8(), target);
  }
  
  // optional int64 function_instantiation_time_usec = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(5, this->function_instantiation_time_usec(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FunctionMetadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 function_tag = 1 [default = -1];
    if (has_function_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->function_tag());
    }
    
    // required string file_name = 2;
    if (has_file_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->file_name());
    }
    
    // required string function_name = 3;
    if (has_function_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->function_name());
    }
    
    // required string function_source_utf8 = 4;
    if (has_function_source_utf8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::StringSize(this->function_source_utf8());
    }
    
    // optional int64 function_instantiation_time_usec = 5;
    if (has_function_instantiation_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->function_instantiation_time_usec());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void FunctionMetadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FunctionMetadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FunctionMetadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FunctionMetadata::MergeFrom(const FunctionMetadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_function_tag(from.function_tag());
    }
    if (from._has_bit(1)) {
      set_file_name(from.file_name());
    }
    if (from._has_bit(2)) {
      set_function_name(from.function_name());
    }
    if (from._has_bit(3)) {
      set_function_source_utf8(from.function_source_utf8());
    }
    if (from._has_bit(4)) {
      set_function_instantiation_time_usec(from.function_instantiation_time_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FunctionMetadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionMetadata::CopyFrom(const FunctionMetadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionMetadata::Swap(FunctionMetadata* other) {
  if (other != this) {
    std::swap(function_tag_, other->function_tag_);
    std::swap(file_name_, other->file_name_);
    std::swap(function_name_, other->function_name_);
    std::swap(function_source_utf8_, other->function_source_utf8_);
    std::swap(function_instantiation_time_usec_, other->function_instantiation_time_usec_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool FunctionMetadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

const ::google::protobuf::Descriptor* FunctionMetadata::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* FunctionMetadata::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return FunctionMetadata_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int CallTree::kFunctionTagFieldNumber;
const int CallTree::kEntryTimeUsecFieldNumber;
const int CallTree::kExitTimeUsecFieldNumber;
const int CallTree::kChildrenFieldNumber;
#endif  // !_MSC_VER

CallTree::CallTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallTree::InitAsDefaultInstance() {}

CallTree::CallTree(const CallTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallTree::SharedCtor() {
  _cached_size_ = 0;
  function_tag_ = -1;
  entry_time_usec_ = GOOGLE_LONGLONG(-1);
  exit_time_usec_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallTree::~CallTree() {
  SharedDtor();
}

void CallTree::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* CallTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallTree_descriptor_;
}

const CallTree& CallTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_profile_2eproto();  return *default_instance_;
}

CallTree* CallTree::default_instance_ = NULL;

CallTree* CallTree::New() const {
  return new CallTree;
}

void CallTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    function_tag_ = -1;
    entry_time_usec_ = GOOGLE_LONGLONG(-1);
    exit_time_usec_ = GOOGLE_LONGLONG(-1);
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int32 function_tag = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt32(
              input, &function_tag_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_entry_time_usec;
        break;
      }
      
      // required int64 entry_time_usec = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_entry_time_usec:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &entry_time_usec_));
        _set_bit(1);
        if (input->ExpectTag(24)) goto parse_exit_time_usec;
        break;
      }
      
      // required int64 exit_time_usec = 3 [default = -1];
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_exit_time_usec:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &exit_time_usec_));
        _set_bit(2);
        if (input->ExpectTag(34)) goto parse_children;
        break;
      }
      
      // repeated .activity.CallTree children = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_children:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_children()));
        if (input->ExpectTag(34)) goto parse_children;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    CallTree::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int32 function_tag = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt32(1, this->function_tag(), output);
  }
  
  // required int64 entry_time_usec = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->entry_time_usec(), output);
  }
  
  // required int64 exit_time_usec = 3 [default = -1];
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(3, this->exit_time_usec(), output);
  }
  
  // repeated .activity.CallTree children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->children(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 function_tag = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt32ToArray(1, this->function_tag(), target);
  }
  
  // required int64 entry_time_usec = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->entry_time_usec(), target);
  }
  
  // required int64 exit_time_usec = 3 [default = -1];
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(3, this->exit_time_usec(), target);
  }
  
  // repeated .activity.CallTree children = 4;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->children(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallTree::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 function_tag = 1 [default = -1];
    if (has_function_tag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int32Size(
          this->function_tag());
    }
    
    // required int64 entry_time_usec = 2 [default = -1];
    if (has_entry_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->entry_time_usec());
    }
    
    // required int64 exit_time_usec = 3 [default = -1];
    if (has_exit_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->exit_time_usec());
    }
    
  }
  // repeated .activity.CallTree children = 4;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->children(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void CallTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallTree::MergeFrom(const CallTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_function_tag(from.function_tag());
    }
    if (from._has_bit(1)) {
      set_entry_time_usec(from.entry_time_usec());
    }
    if (from._has_bit(2)) {
      set_exit_time_usec(from.exit_time_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallTree::CopyFrom(const CallTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallTree::Swap(CallTree* other) {
  if (other != this) {
    std::swap(function_tag_, other->function_tag_);
    std::swap(entry_time_usec_, other->entry_time_usec_);
    std::swap(exit_time_usec_, other->exit_time_usec_);
    children_.Swap(&other->children_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool CallTree::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < children_size(); i++) {
    if (!this->children(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* CallTree::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* CallTree::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return CallTree_reflection_;
}

// ===================================================================

#ifndef _MSC_VER
const int Profile::kStartTimeUsecFieldNumber;
const int Profile::kDurationUsecFieldNumber;
const int Profile::kFunctionMetadataFieldNumber;
const int Profile::kCallTreeFieldNumber;
#endif  // !_MSC_VER

Profile::Profile()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Profile::InitAsDefaultInstance() {}

Profile::Profile(const Profile& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Profile::SharedCtor() {
  _cached_size_ = 0;
  start_time_usec_ = GOOGLE_LONGLONG(-1);
  duration_usec_ = GOOGLE_LONGLONG(-1);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Profile::~Profile() {
  SharedDtor();
}

void Profile::SharedDtor() {
  if (this != default_instance_) {
  }
}

const ::google::protobuf::Descriptor* Profile::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Profile_descriptor_;
}

const Profile& Profile::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_profile_2eproto();  return *default_instance_;
}

Profile* Profile::default_instance_ = NULL;

Profile* Profile::New() const {
  return new Profile;
}

void Profile::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    start_time_usec_ = GOOGLE_LONGLONG(-1);
    duration_usec_ = GOOGLE_LONGLONG(-1);
  }
  function_metadata_.Clear();
  call_tree_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Profile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormat::GetTagFieldNumber(tag)) {
      // required int64 start_time_usec = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &start_time_usec_));
        _set_bit(0);
        if (input->ExpectTag(16)) goto parse_duration_usec;
        break;
      }
      
      // required int64 duration_usec = 2 [default = -1];
      case 2: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_VARINT) {
          goto handle_uninterpreted;
        }
       parse_duration_usec:
        DO_(::google::protobuf::internal::WireFormat::ReadInt64(
              input, &duration_usec_));
        _set_bit(1);
        if (input->ExpectTag(26)) goto parse_function_metadata;
        break;
      }
      
      // repeated .activity.FunctionMetadata function_metadata = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_function_metadata:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_function_metadata()));
        if (input->ExpectTag(26)) goto parse_function_metadata;
        if (input->ExpectTag(34)) goto parse_call_tree;
        break;
      }
      
      // repeated .activity.CallTree call_tree = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) !=
            ::google::protobuf::internal::WireFormat::WIRETYPE_LENGTH_DELIMITED) {
          goto handle_uninterpreted;
        }
       parse_call_tree:
        DO_(::google::protobuf::internal::WireFormat::ReadMessageNoVirtual(
             input, add_call_tree()));
        if (input->ExpectTag(34)) goto parse_call_tree;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormat::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormat::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Profile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  ::google::protobuf::uint8* raw_buffer = output->GetDirectBufferForNBytesAndAdvance(_cached_size_);
  if (raw_buffer != NULL) {
    Profile::SerializeWithCachedSizesToArray(raw_buffer);
    return;
  }
  
  // required int64 start_time_usec = 1 [default = -1];
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(1, this->start_time_usec(), output);
  }
  
  // required int64 duration_usec = 2 [default = -1];
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormat::WriteInt64(2, this->duration_usec(), output);
  }
  
  // repeated .activity.FunctionMetadata function_metadata = 3;
  for (int i = 0; i < this->function_metadata_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(3, this->function_metadata(i), output);
  }
  
  // repeated .activity.CallTree call_tree = 4;
  for (int i = 0; i < this->call_tree_size(); i++) {
    ::google::protobuf::internal::WireFormat::WriteMessageNoVirtual(4, this->call_tree(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Profile::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 start_time_usec = 1 [default = -1];
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(1, this->start_time_usec(), target);
  }
  
  // required int64 duration_usec = 2 [default = -1];
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormat::WriteInt64ToArray(2, this->duration_usec(), target);
  }
  
  // repeated .activity.FunctionMetadata function_metadata = 3;
  for (int i = 0; i < this->function_metadata_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(3, this->function_metadata(i), target);
  }
  
  // repeated .activity.CallTree call_tree = 4;
  for (int i = 0; i < this->call_tree_size(); i++) {
    target = ::google::protobuf::internal::WireFormat::WriteMessageNoVirtualToArray(4, this->call_tree(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Profile::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 start_time_usec = 1 [default = -1];
    if (has_start_time_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->start_time_usec());
    }
    
    // required int64 duration_usec = 2 [default = -1];
    if (has_duration_usec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormat::Int64Size(
          this->duration_usec());
    }
    
  }
  // repeated .activity.FunctionMetadata function_metadata = 3;
  total_size += 1 * this->function_metadata_size();
  for (int i = 0; i < this->function_metadata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->function_metadata(i));
  }
  
  // repeated .activity.CallTree call_tree = 4;
  total_size += 1 * this->call_tree_size();
  for (int i = 0; i < this->call_tree_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormat::MessageSizeNoVirtual(
        this->call_tree(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  _cached_size_ = total_size;
  return total_size;
}

void Profile::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Profile* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Profile*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Profile::MergeFrom(const Profile& from) {
  GOOGLE_CHECK_NE(&from, this);
  function_metadata_.MergeFrom(from.function_metadata_);
  call_tree_.MergeFrom(from.call_tree_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_start_time_usec(from.start_time_usec());
    }
    if (from._has_bit(1)) {
      set_duration_usec(from.duration_usec());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Profile::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::CopyFrom(const Profile& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Profile::Swap(Profile* other) {
  if (other != this) {
    std::swap(start_time_usec_, other->start_time_usec_);
    std::swap(duration_usec_, other->duration_usec_);
    function_metadata_.Swap(&other->function_metadata_);
    call_tree_.Swap(&other->call_tree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

bool Profile::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < function_metadata_size(); i++) {
    if (!this->function_metadata(i).IsInitialized()) return false;
  }
  for (int i = 0; i < call_tree_size(); i++) {
    if (!this->call_tree(i).IsInitialized()) return false;
  }
  return true;
}

const ::google::protobuf::Descriptor* Profile::GetDescriptor() const {
  return descriptor();
}

const ::google::protobuf::Reflection* Profile::GetReflection() const {
  protobuf_AssignDescriptorsOnce();
  return Profile_reflection_;
}

}  // namespace activity
