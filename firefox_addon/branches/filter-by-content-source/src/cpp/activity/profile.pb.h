// Generated by the protocol buffer compiler.  DO NOT EDIT!

#ifndef PROTOBUF_profile_2eproto__INCLUDED
#define PROTOBUF_profile_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>

namespace activity {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_profile_2eproto();
void protobuf_AssignDesc_profile_2eproto();
void protobuf_ShutdownFile_profile_2eproto();

class FunctionMetadata;
class CallTree;
class Profile;

// ===================================================================

class FunctionMetadata : public ::google::protobuf::Message {
 public:
  FunctionMetadata();
  virtual ~FunctionMetadata();
  
  FunctionMetadata(const FunctionMetadata& from);
  
  inline FunctionMetadata& operator=(const FunctionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const FunctionMetadata& default_instance();
  void Swap(FunctionMetadata* other);
  
  // implements Message ----------------------------------------------
  
  FunctionMetadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FunctionMetadata& from);
  void MergeFrom(const FunctionMetadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 function_tag = 1 [default = -1];
  inline bool has_function_tag() const;
  inline void clear_function_tag();
  static const int kFunctionTagFieldNumber = 1;
  inline ::google::protobuf::int32 function_tag() const;
  inline void set_function_tag(::google::protobuf::int32 value);
  
  // required string file_name = 2;
  inline bool has_file_name() const;
  inline void clear_file_name();
  static const int kFileNameFieldNumber = 2;
  inline const ::std::string& file_name() const;
  inline void set_file_name(const ::std::string& value);
  inline void set_file_name(const char* value);
  inline void set_file_name(const char* value, size_t size);
  inline ::std::string* mutable_file_name();
  
  // required string function_name = 3;
  inline bool has_function_name() const;
  inline void clear_function_name();
  static const int kFunctionNameFieldNumber = 3;
  inline const ::std::string& function_name() const;
  inline void set_function_name(const ::std::string& value);
  inline void set_function_name(const char* value);
  inline void set_function_name(const char* value, size_t size);
  inline ::std::string* mutable_function_name();
  
  // required string function_source_utf8 = 4;
  inline bool has_function_source_utf8() const;
  inline void clear_function_source_utf8();
  static const int kFunctionSourceUtf8FieldNumber = 4;
  inline const ::std::string& function_source_utf8() const;
  inline void set_function_source_utf8(const ::std::string& value);
  inline void set_function_source_utf8(const char* value);
  inline void set_function_source_utf8(const char* value, size_t size);
  inline ::std::string* mutable_function_source_utf8();
  
  // optional int64 function_instantiation_time_usec = 5;
  inline bool has_function_instantiation_time_usec() const;
  inline void clear_function_instantiation_time_usec();
  static const int kFunctionInstantiationTimeUsecFieldNumber = 5;
  inline ::google::protobuf::int64 function_instantiation_time_usec() const;
  inline void set_function_instantiation_time_usec(::google::protobuf::int64 value);
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 function_tag_;
  ::std::string* file_name_;
  static const ::std::string _default_file_name_;
  ::std::string* function_name_;
  static const ::std::string _default_function_name_;
  ::std::string* function_source_utf8_;
  static const ::std::string _default_function_source_utf8_;
  ::google::protobuf::int64 function_instantiation_time_usec_;
  friend void  protobuf_AddDesc_profile_2eproto();
  friend void protobuf_AssignDesc_profile_2eproto();
  friend void protobuf_ShutdownFile_profile_2eproto();
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static FunctionMetadata* default_instance_;
};
// -------------------------------------------------------------------

class CallTree : public ::google::protobuf::Message {
 public:
  CallTree();
  virtual ~CallTree();
  
  CallTree(const CallTree& from);
  
  inline CallTree& operator=(const CallTree& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CallTree& default_instance();
  void Swap(CallTree* other);
  
  // implements Message ----------------------------------------------
  
  CallTree* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CallTree& from);
  void MergeFrom(const CallTree& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int32 function_tag = 1 [default = -1];
  inline bool has_function_tag() const;
  inline void clear_function_tag();
  static const int kFunctionTagFieldNumber = 1;
  inline ::google::protobuf::int32 function_tag() const;
  inline void set_function_tag(::google::protobuf::int32 value);
  
  // required int64 entry_time_usec = 2 [default = -1];
  inline bool has_entry_time_usec() const;
  inline void clear_entry_time_usec();
  static const int kEntryTimeUsecFieldNumber = 2;
  inline ::google::protobuf::int64 entry_time_usec() const;
  inline void set_entry_time_usec(::google::protobuf::int64 value);
  
  // required int64 exit_time_usec = 3 [default = -1];
  inline bool has_exit_time_usec() const;
  inline void clear_exit_time_usec();
  static const int kExitTimeUsecFieldNumber = 3;
  inline ::google::protobuf::int64 exit_time_usec() const;
  inline void set_exit_time_usec(::google::protobuf::int64 value);
  
  // repeated .activity.CallTree children = 4;
  inline int children_size() const;
  inline void clear_children();
  static const int kChildrenFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::activity::CallTree >& children() const;
  inline ::google::protobuf::RepeatedPtrField< ::activity::CallTree >* mutable_children();
  inline const ::activity::CallTree& children(int index) const;
  inline ::activity::CallTree* mutable_children(int index);
  inline ::activity::CallTree* add_children();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 function_tag_;
  ::google::protobuf::int64 entry_time_usec_;
  ::google::protobuf::int64 exit_time_usec_;
  ::google::protobuf::RepeatedPtrField< ::activity::CallTree > children_;
  friend void  protobuf_AddDesc_profile_2eproto();
  friend void protobuf_AssignDesc_profile_2eproto();
  friend void protobuf_ShutdownFile_profile_2eproto();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CallTree* default_instance_;
};
// -------------------------------------------------------------------

class Profile : public ::google::protobuf::Message {
 public:
  Profile();
  virtual ~Profile();
  
  Profile(const Profile& from);
  
  inline Profile& operator=(const Profile& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Profile& default_instance();
  void Swap(Profile* other);
  
  // implements Message ----------------------------------------------
  
  Profile* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Profile& from);
  void MergeFrom(const Profile& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const { _cached_size_ = size; }
  public:
  
  const ::google::protobuf::Descriptor* GetDescriptor() const;
  const ::google::protobuf::Reflection* GetReflection() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required int64 start_time_usec = 1 [default = -1];
  inline bool has_start_time_usec() const;
  inline void clear_start_time_usec();
  static const int kStartTimeUsecFieldNumber = 1;
  inline ::google::protobuf::int64 start_time_usec() const;
  inline void set_start_time_usec(::google::protobuf::int64 value);
  
  // required int64 duration_usec = 2 [default = -1];
  inline bool has_duration_usec() const;
  inline void clear_duration_usec();
  static const int kDurationUsecFieldNumber = 2;
  inline ::google::protobuf::int64 duration_usec() const;
  inline void set_duration_usec(::google::protobuf::int64 value);
  
  // repeated .activity.FunctionMetadata function_metadata = 3;
  inline int function_metadata_size() const;
  inline void clear_function_metadata();
  static const int kFunctionMetadataFieldNumber = 3;
  inline const ::google::protobuf::RepeatedPtrField< ::activity::FunctionMetadata >& function_metadata() const;
  inline ::google::protobuf::RepeatedPtrField< ::activity::FunctionMetadata >* mutable_function_metadata();
  inline const ::activity::FunctionMetadata& function_metadata(int index) const;
  inline ::activity::FunctionMetadata* mutable_function_metadata(int index);
  inline ::activity::FunctionMetadata* add_function_metadata();
  
  // repeated .activity.CallTree call_tree = 4;
  inline int call_tree_size() const;
  inline void clear_call_tree();
  static const int kCallTreeFieldNumber = 4;
  inline const ::google::protobuf::RepeatedPtrField< ::activity::CallTree >& call_tree() const;
  inline ::google::protobuf::RepeatedPtrField< ::activity::CallTree >* mutable_call_tree();
  inline const ::activity::CallTree& call_tree(int index) const;
  inline ::activity::CallTree* mutable_call_tree(int index);
  inline ::activity::CallTree* add_call_tree();
  
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 start_time_usec_;
  ::google::protobuf::int64 duration_usec_;
  ::google::protobuf::RepeatedPtrField< ::activity::FunctionMetadata > function_metadata_;
  ::google::protobuf::RepeatedPtrField< ::activity::CallTree > call_tree_;
  friend void  protobuf_AddDesc_profile_2eproto();
  friend void protobuf_AssignDesc_profile_2eproto();
  friend void protobuf_ShutdownFile_profile_2eproto();
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Profile* default_instance_;
};
// ===================================================================


// ===================================================================


// ===================================================================

// FunctionMetadata

// required int32 function_tag = 1 [default = -1];
inline bool FunctionMetadata::has_function_tag() const {
  return _has_bit(0);
}
inline void FunctionMetadata::clear_function_tag() {
  function_tag_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 FunctionMetadata::function_tag() const {
  return function_tag_;
}
inline void FunctionMetadata::set_function_tag(::google::protobuf::int32 value) {
  _set_bit(0);
  function_tag_ = value;
}

// required string file_name = 2;
inline bool FunctionMetadata::has_file_name() const {
  return _has_bit(1);
}
inline void FunctionMetadata::clear_file_name() {
  if (file_name_ != &_default_file_name_) {
    file_name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& FunctionMetadata::file_name() const {
  return *file_name_;
}
inline void FunctionMetadata::set_file_name(const ::std::string& value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FunctionMetadata::set_file_name(const char* value) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(value);
}
inline void FunctionMetadata::set_file_name(const char* value, size_t size) {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  file_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionMetadata::mutable_file_name() {
  _set_bit(1);
  if (file_name_ == &_default_file_name_) {
    file_name_ = new ::std::string;
  }
  return file_name_;
}

// required string function_name = 3;
inline bool FunctionMetadata::has_function_name() const {
  return _has_bit(2);
}
inline void FunctionMetadata::clear_function_name() {
  if (function_name_ != &_default_function_name_) {
    function_name_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& FunctionMetadata::function_name() const {
  return *function_name_;
}
inline void FunctionMetadata::set_function_name(const ::std::string& value) {
  _set_bit(2);
  if (function_name_ == &_default_function_name_) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
}
inline void FunctionMetadata::set_function_name(const char* value) {
  _set_bit(2);
  if (function_name_ == &_default_function_name_) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(value);
}
inline void FunctionMetadata::set_function_name(const char* value, size_t size) {
  _set_bit(2);
  if (function_name_ == &_default_function_name_) {
    function_name_ = new ::std::string;
  }
  function_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionMetadata::mutable_function_name() {
  _set_bit(2);
  if (function_name_ == &_default_function_name_) {
    function_name_ = new ::std::string;
  }
  return function_name_;
}

// required string function_source_utf8 = 4;
inline bool FunctionMetadata::has_function_source_utf8() const {
  return _has_bit(3);
}
inline void FunctionMetadata::clear_function_source_utf8() {
  if (function_source_utf8_ != &_default_function_source_utf8_) {
    function_source_utf8_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& FunctionMetadata::function_source_utf8() const {
  return *function_source_utf8_;
}
inline void FunctionMetadata::set_function_source_utf8(const ::std::string& value) {
  _set_bit(3);
  if (function_source_utf8_ == &_default_function_source_utf8_) {
    function_source_utf8_ = new ::std::string;
  }
  function_source_utf8_->assign(value);
}
inline void FunctionMetadata::set_function_source_utf8(const char* value) {
  _set_bit(3);
  if (function_source_utf8_ == &_default_function_source_utf8_) {
    function_source_utf8_ = new ::std::string;
  }
  function_source_utf8_->assign(value);
}
inline void FunctionMetadata::set_function_source_utf8(const char* value, size_t size) {
  _set_bit(3);
  if (function_source_utf8_ == &_default_function_source_utf8_) {
    function_source_utf8_ = new ::std::string;
  }
  function_source_utf8_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FunctionMetadata::mutable_function_source_utf8() {
  _set_bit(3);
  if (function_source_utf8_ == &_default_function_source_utf8_) {
    function_source_utf8_ = new ::std::string;
  }
  return function_source_utf8_;
}

// optional int64 function_instantiation_time_usec = 5;
inline bool FunctionMetadata::has_function_instantiation_time_usec() const {
  return _has_bit(4);
}
inline void FunctionMetadata::clear_function_instantiation_time_usec() {
  function_instantiation_time_usec_ = GOOGLE_LONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::int64 FunctionMetadata::function_instantiation_time_usec() const {
  return function_instantiation_time_usec_;
}
inline void FunctionMetadata::set_function_instantiation_time_usec(::google::protobuf::int64 value) {
  _set_bit(4);
  function_instantiation_time_usec_ = value;
}

// -------------------------------------------------------------------

// CallTree

// required int32 function_tag = 1 [default = -1];
inline bool CallTree::has_function_tag() const {
  return _has_bit(0);
}
inline void CallTree::clear_function_tag() {
  function_tag_ = -1;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CallTree::function_tag() const {
  return function_tag_;
}
inline void CallTree::set_function_tag(::google::protobuf::int32 value) {
  _set_bit(0);
  function_tag_ = value;
}

// required int64 entry_time_usec = 2 [default = -1];
inline bool CallTree::has_entry_time_usec() const {
  return _has_bit(1);
}
inline void CallTree::clear_entry_time_usec() {
  entry_time_usec_ = GOOGLE_LONGLONG(-1);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CallTree::entry_time_usec() const {
  return entry_time_usec_;
}
inline void CallTree::set_entry_time_usec(::google::protobuf::int64 value) {
  _set_bit(1);
  entry_time_usec_ = value;
}

// required int64 exit_time_usec = 3 [default = -1];
inline bool CallTree::has_exit_time_usec() const {
  return _has_bit(2);
}
inline void CallTree::clear_exit_time_usec() {
  exit_time_usec_ = GOOGLE_LONGLONG(-1);
  _clear_bit(2);
}
inline ::google::protobuf::int64 CallTree::exit_time_usec() const {
  return exit_time_usec_;
}
inline void CallTree::set_exit_time_usec(::google::protobuf::int64 value) {
  _set_bit(2);
  exit_time_usec_ = value;
}

// repeated .activity.CallTree children = 4;
inline int CallTree::children_size() const {
  return children_.size();
}
inline void CallTree::clear_children() {
  children_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::activity::CallTree >&
CallTree::children() const {
  return children_;
}
inline ::google::protobuf::RepeatedPtrField< ::activity::CallTree >*
CallTree::mutable_children() {
  return &children_;
}
inline const ::activity::CallTree& CallTree::children(int index) const {
  return children_.Get(index);
}
inline ::activity::CallTree* CallTree::mutable_children(int index) {
  return children_.Mutable(index);
}
inline ::activity::CallTree* CallTree::add_children() {
  return children_.Add();
}

// -------------------------------------------------------------------

// Profile

// required int64 start_time_usec = 1 [default = -1];
inline bool Profile::has_start_time_usec() const {
  return _has_bit(0);
}
inline void Profile::clear_start_time_usec() {
  start_time_usec_ = GOOGLE_LONGLONG(-1);
  _clear_bit(0);
}
inline ::google::protobuf::int64 Profile::start_time_usec() const {
  return start_time_usec_;
}
inline void Profile::set_start_time_usec(::google::protobuf::int64 value) {
  _set_bit(0);
  start_time_usec_ = value;
}

// required int64 duration_usec = 2 [default = -1];
inline bool Profile::has_duration_usec() const {
  return _has_bit(1);
}
inline void Profile::clear_duration_usec() {
  duration_usec_ = GOOGLE_LONGLONG(-1);
  _clear_bit(1);
}
inline ::google::protobuf::int64 Profile::duration_usec() const {
  return duration_usec_;
}
inline void Profile::set_duration_usec(::google::protobuf::int64 value) {
  _set_bit(1);
  duration_usec_ = value;
}

// repeated .activity.FunctionMetadata function_metadata = 3;
inline int Profile::function_metadata_size() const {
  return function_metadata_.size();
}
inline void Profile::clear_function_metadata() {
  function_metadata_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::activity::FunctionMetadata >&
Profile::function_metadata() const {
  return function_metadata_;
}
inline ::google::protobuf::RepeatedPtrField< ::activity::FunctionMetadata >*
Profile::mutable_function_metadata() {
  return &function_metadata_;
}
inline const ::activity::FunctionMetadata& Profile::function_metadata(int index) const {
  return function_metadata_.Get(index);
}
inline ::activity::FunctionMetadata* Profile::mutable_function_metadata(int index) {
  return function_metadata_.Mutable(index);
}
inline ::activity::FunctionMetadata* Profile::add_function_metadata() {
  return function_metadata_.Add();
}

// repeated .activity.CallTree call_tree = 4;
inline int Profile::call_tree_size() const {
  return call_tree_.size();
}
inline void Profile::clear_call_tree() {
  call_tree_.Clear();
}
inline const ::google::protobuf::RepeatedPtrField< ::activity::CallTree >&
Profile::call_tree() const {
  return call_tree_;
}
inline ::google::protobuf::RepeatedPtrField< ::activity::CallTree >*
Profile::mutable_call_tree() {
  return &call_tree_;
}
inline const ::activity::CallTree& Profile::call_tree(int index) const {
  return call_tree_.Get(index);
}
inline ::activity::CallTree* Profile::mutable_call_tree(int index) {
  return call_tree_.Mutable(index);
}
inline ::activity::CallTree* Profile::add_call_tree() {
  return call_tree_.Add();
}


}  // namespace activity
#endif  // PROTOBUF_profile_2eproto__INCLUDED
