=Page Speed Defer Loading of JavaScript Rule=

The Page Speed *"Defer loading of !JavaScript"* rule uses the [http://mxr.mozilla.org/mozilla/source/js/jsd/idl/jsdIDebuggerService.idl Firefox JavaScript debugger service] (JSD) to determine which functions on a page were called, and which were not. It can be useful when determining which functions on a page can be delay loaded, in order to reduce the latency of the page.

Because this Page Speed rule runs some of its analysis when each page's onload handler is invoked, it is disabled by default. When this rule is enabled, it will slow down the browser, so we recommend leaving it disabled unless you are trying to determine which !JavaScript on a page can be delay loaded.

If you are interested in profiling the execution of your !JavaScript, you might also be interested in ActivityPanelSavedProfiles.

==Profiling==

For a given page, this rule iterates over all of the !JavaScript functions referenced by that page. This includes functions declared inline on the page, functions in external !JavaScript files loaded via `script` tags, and !JavaScript eval'd into the page. For each referenced function, we keep track of which were called, and which were not. Based on the information collected, we calculate the percentage of functions on the page that were called at least once.

==Cached Results==

All of the state that the JSD tracks is persisted in memory for the lifetime of the Firefox session in a single global state space (the state is not per page load). This makes it difficult to generate accurate results for this Page Speed rule.

Fortunately, if a user visits a page for the first time in a Firefox session, the result should be accurate for that visit, since none of the !JavaScript on that page has been seen by the JSD before.

If the user continues to use that page, though, and additional JS is loaded/executed during the interaction with that page, the JSD accumulates additional information about those new functions in its global state space.

If the user then reloads that page, for instance, the JSD does not clear its state about which functions are associated with that page. The JSD still knows about all of the additional JS that was loaded during the last visit to the page, even though none of that JS has been loaded/executed during the current visit. It is not possible to distinguish between JS fetched on the current page load vs JS fetched during a previous visit to that page. Thus, to maximize the accuracy of this Page Speed rule, we have decided to profile each page only the first time it is visited during a Firefox session.

There are a few cases where we may still generate incorrect results for a page, due to the global state of the JSD. For instance, any time a JS file is shared by multiple pages, the profile data will only be accurate for the first page that loads that JS file. Thus, if the !JavaScript coverage rule detects that multiple pages share the same !JavaScript resource, it will only profile the first page to use that resource.

To guarantee that the result generated by this Page Speed rule is accurate, you should profile your page as soon as Firefox is started.

==Profiling at Onload==

Many web apps asynchronously pre-fetch !JavaScript during or after the `onload` handler executes. Thus, when this Page Speed rule is enabled, it runs at onload. Otherwise, this rule could unfairly penalize for pre-fetched functions.

==Configuration Options==

|| *Firefox Preference* || *Default Value* || *Description* ||
|| extensions.pagespeed.js_profiler_enable || false || Whether or not this rule is enabled. ||
|| extensions.pagespeed.js_coverage.max_functions_per_script || 100 || Maximum number of functions to show in the summary, per URL. ||
|| extensions.pagespeed.js_coverage.track_function_size || false || Whether to count function sizes instead of function counts. Note that computing of function sizes is not yet entirely accurate, which is why we track function counts by default. ||