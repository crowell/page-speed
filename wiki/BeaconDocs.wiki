#summary Explain the format of the beacons Page Speed can send.
#labels Phase-Design

= Introduction =

  An upcoming release of Page Speed will make it possible to send results to a web service.  This will allow people to archive results and see trends over time.  This page documents the format of the beacons that send results.  It is aimed at developers who wish to receive and process the beacons.

= Details =

  Page Speed supports two types of beacons.  The full beacon aims to record *every* detail of Page Speed's output.  The minimal beacon aims to send enough information to track page scores and vital statistics over time, while keeping the volume of information sent reasonable.  If all the information you care about is in the minimal beacon, you should use it.  

  If neither beacon meets your needs, bring it up on page-speed-discuss@googlegroups.com .  Implementing a beacon is not hard, and we would be happy to add a new one if the existing beacons don't cover your use case.

== Minimal Beacon ==

   Progress on implementing the minimal beacon is tracked as [http://code.google.com/p/page-speed/issues/detail?id=58 issue 58].

   The minimal beacon sends an http GET to a url with a set of key-value pairs encoded in the parameter string.  

   Both the key and value are escaped with the javascript function encodeURIComponent().  This matters for urls, which have characters like : and / which will be escaped.  For example, consider the url 'http://www.example.com/test'.  It can not be sent as-is, because it contains the characters '/' and ':'.  We encode that url like this: 'http%3A%2F%2Fwww.example.com%2Ftest'.  Most CGI libraries have functions to undo this encoding.

=== Enabling the Minimal Beacon ===

   The following preferences can be set in about:config to control the minimal beacon:

  * {{{extensions.PageSpeed.beacon.minimal.url}}} Set to the URL which takes GETs.
  * {{{extensions.PageSpeed.beacon.minimal.enabled}}} Set to true to enable the minimal beacon.  
  * {{{extensions.PageSpeed.beacon.minimal.autorun}}} Set to true to automatically send the minimal beacon once scores are computed.

=== Data Encoded in the Minimal Beacon ===

The following table lists the parameters sent in the minimal beacon:

|| *key* || *value* || *example* ||
|| v || The version of Page Speed. || 1.1 ||
|| u || The URL scored. || http%3A%2F%2Fwww.example.com%2Ftest (see the discussion of escaping above)||
|| r || The total number of requests made by the browser when loading the page.|| 10 ||
|| w || The uncompressed total size of all resources loaded by the page, in bytes.|| 1024 ||
|| o || The overall score of the page.  This will be in 0-100.|| 89.2 ||
|| l || The page load time in milliseconds.|| 5000 ||
|| t || Transfer size of all resources loaded by the page, in bytes.  Because web servers can send compressed data, transfer size may be less than the size reported with the 'w' key.|| 500 ||
|| pMinifyJS || Score for the rule 'Minify JavaScript'. || 100 ||
|| pOptImgs || Score for the rule 'Optimize images'. || 100 ||
|| pImgDims || Score for the rule 'Specify image dimensions'. || 100 ||
|| pCombineJS || Score for the rule 'Combine external JavaScript'. || 100 ||
|| pCombineCSS || Score for the rule 'Combine external CSS'. || 100 ||
|| pCssInHead || Score for the rule 'Put CSS in the document head'. || 100 ||
|| pBrowserCache || Score for the rule 'Leverage browser caching'. || 100 ||
|| pProxyCache || Score for the rule 'Leverage proxy caching'. || 100 ||
|| pNoCookie || Score for the rule 'Serve static content from a cookieless domain'. || 100 ||
|| pCookieSize || Score for the rule 'Minimize cookie size'. || 100 ||
|| pParallelDl || Score for the rule 'Parallelize downloads across hostnames'. || 100 ||
|| pCssSelect || Score for the rule 'Use efficient CSS selectors'. || 100 ||
|| pCssJsOrder || Score for the rule 'Optimize the order of styles and scripts'. || 100 ||
|| pDeferJS || Score for the rule 'Defer loading of JavaScript'. || 100 ||
|| pGzip || Score for the rule 'Enable gzip compression'. || 100 ||
|| pMinRedirect || Score for the rule 'Minimize redirects'. || 100 ||
|| pCssExpr || Score for the rule 'Avoid CSS expressions'. || 100 ||
|| pUnusedCSS || Score for the rule 'Remove unused CSS'. || 100 ||
|| pMinDns || Score for the rule 'Minimize DNS lookups'. || 100 ||
|| pDupeRsrc || Score for the rule 'Serve resources from a consistent URL'. || 100 ||

   All rules (those keys that match {{{/^p.*/}}}) can have the following values:

  * A numeric score between 0 and 100.  Scores may have a decimal part (such as 12.3).
  * 'na', if the rule does not apply to the page.  Page Speed shows 'n/a' in its results, but the '/' must be escaped, so we dropped it.
  * 'err' if there was an error running the rule.  Page Speed shows 'Sorry, there was an error running this rule ...' in this case.

== Full Beacon ==

   The full beacon sends an html POST to a url.  The text of the POST is a JSON object with information about the page.  You can get the same text written to a file by selecting "Write JSON File" from the Export menu in the Page Seed tab of firebug.

   The JSON object has the following properties:

  * *resultsFormatVersion*: Always 1 for now.  If an incompatible change to the format is made in the future, we will increment this number.
  * *versions*: Holds the versions of Firefox, Firebug, and Page Speed. 
  * *pageStats*: Holds statistics about the page, such as the url scored, the number of http requests made loading the page, and the total number of bytes transfered.
  * *rules*: An array of objects, each representing results from a Page Speed rule.  Each rule has the following properties:  
    * *name*: The name of the rule, as it is shown in the GUI.
    * *shortName*: A short (less than 10 char) name for each rule.
    * *score*: The score for the rule.  Scores are in 0.0-100.0 .
    * *warnings* : The HTML of any warnings generated by this rule.  Items listed as warnings give a lower score.
    * *information*: The html of any informational text generated by this rule.  Items listed as information do not lead to a lower score.
    * *statistics*: This object has statistics used to compute the score of this rule.  Each rule uses different statistics.  For example, the rule "Minimize redirects" stores a property named "numRedirects" in its statistics object.  The value of numRedirects is the number of redirects encountered while loading the main html of the page.

    * *tags*: This object is intended to holds key-value pairs that Page Speed could use to encode information about the page being scored.  It is not used at this time.  As an example of what it could be used for, think of a Firefox extension that automatically runs Page Speed on a list of urls from a file.  You want to mark all beacons that come from this extension, so that a script can collect the results.  You can do this by adding a property to tags.  Something like tags.createdBy = 'myAutoScoringExtension'.

== Comments ==

* Because there is no automatic way to be notified of comments, we do not see them and can not respond to them.*  If you have a question or comment about this page, please email page-speed-discuss@googlegroups.com . 